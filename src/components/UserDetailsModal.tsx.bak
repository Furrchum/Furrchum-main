import { useState, useEffect, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { CheckCircle, XCircle, Calendar, Clock, AlertCircle, Trash2, Loader2, FileWarning } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Textarea } from '@/components/ui/textarea';
import { UserProfile, VetProfile, Appointment } from '@/types/profiles';
import { User, FileText, CheckCircle as CheckCircleIcon, XCircle as XCircleIcon, Download, Eye } from 'lucide-react';
import { openFile, downloadFile } from '@/utils/supabaseStorage';

interface UserDetailsModalProps {
  user: UserProfile & Partial<VetProfile>;
  isOpen: boolean;
  onClose: () => void;
  onUserUpdated?: () => void;
}

const UserDetailsModal = ({ user, isOpen, onClose, onUserUpdated }: UserDetailsModalProps) => {
  const [vetProfile, setVetProfile] = useState<VetProfile | null>(null);
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [loading, setLoading] = useState(false);
  const [rejectionFeedback, setRejectionFeedback] = useState('');
  const [showRejectionForm, setShowRejectionForm] = useState(false);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const { toast } = useToast();
  
  const fetchUserDetails = useCallback(async () => {
    if (!user) return;

    setLoading(true);
    try {
      // Fetch vet profile if user is a vet
      if (user.user_type === 'vet') {
        const { data: vetData, error: vetError } = await supabase
          .from('vet_profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (vetError && vetError.code !== 'PGRST116') {
          console.error('Error fetching vet profile:', vetError);
        } else if (vetData) {
          // Transform the data to handle null values properly
          // Only include fields that are actually in the VetProfile interface
          const transformedVetProfile: VetProfile = {
            id: vetData.id,
            first_name: vetData.first_name || '',
            last_name: vetData.last_name || '',
            specialization: vetData.specialization || '',
            about: vetData.about || '',
            consultation_fee: vetData.consultation_fee || 0,
            image_url: vetData.image_url || '',
            years_experience: vetData.years_experience || 0,
            phone: vetData.phone || '',  // phone_number doesn't exist in the database schema
            gender: vetData.gender || '',
            languages: Array.isArray(vetData.languages) ? vetData.languages : [],
            zip_code: vetData.zip_code || '',
            clinic_location: vetData.clinic_location || '',
            clinic_images: Array.isArray(vetData.clinic_images) ? vetData.clinic_images : [],
            license_url: vetData.license_url || '',
            rating: typeof vetData.rating === 'number' ? vetData.rating : 5,
            availability: typeof vetData.availability === 'object' ? JSON.stringify(vetData.availability) : (vetData.availability?.toString() || 'Available'),
            offers_video_calls: Boolean(vetData.offers_video_calls),
            offers_in_person: Boolean(vetData.offers_in_person),
            created_at: vetData.created_at,
            approval_status: (vetData.approval_status as 'pending' | 'approved' | 'rejected') || 'pending',
            approved_at: vetData.approved_at,
            approved_by: vetData.approved_by,
          };
          
          setVetProfile(transformedVetProfile);
          console.log('Transformed vet profile data:', transformedVetProfile); // Debug log
        }
      }

      // Fetch recent appointments
      const { data: appointmentsData, error: appointmentsError } = await supabase
        .from('bookings')
        .select(`
          *,
          vet_profiles(first_name, last_name),
          pets(name)
        `)
        .or(`pet_owner_id.eq.${user.id},vet_id.eq.${user.id}`)
        .order('created_at', { ascending: false })
        .limit(5);

      if (appointmentsError) {
        console.error('Error fetching appointments:', appointmentsError);
      } else {
        setAppointments(appointmentsData || []);
      }
    } catch (error) {
      console.error('Error fetching user details:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch user details';
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [user, toast]);
  
  useEffect(() => {
    if (isOpen && user) {
      fetchUserDetails();
    }
  }, [isOpen, user, fetchUserDetails]);

  // Function to verify if a vet's approval status was updated successfully
  const verifyVetApprovalStatus = async (vetId: string, expectedStatus: 'pending' | 'approved' | 'rejected'): Promise<boolean> => {
    try {
      const { data, error } = await supabase
        .from('vet_profiles')
        .select('approval_status')
        .eq('id', vetId)
        .single();

      if (error) {
        console.error('Error verifying vet approval status:', error);
        return false;
      }

      if (!data) {
        console.warn('No vet profile found for verification');
        return false;
      }

      const currentStatus = data.approval_status;
      console.log(`Verification: Expected status ${expectedStatus}, current status ${currentStatus}`);
      
      return currentStatus === expectedStatus;
    } catch (err) {
      console.error('Error in verification:', err);
      return false;
    }
  };

  const handleVetApproval = useCallback(async (status: 'approved' | 'rejected', feedback?: string) => {
    if (!vetProfile || !user) return;

    try {
      setLoading(true);

      console.log(`Updating vet profile ${vetProfile.id} to status: ${status}`);

      // Create update data with only the fields we know exist in the table
      const updateData = {
        approval_status: status
      };

      // Log feedback for rejections, but don't try to store it in a non-existent column
      if (status === 'rejected' && feedback) {
        console.log(`Rejection feedback for vet ${vetProfile.id}: ${feedback}`);
        // We could store this in a separate table if needed
      }

      // Update the vet_profiles table
      const { error: profileError } = await supabase
        .from('vet_profiles')
        .update(updateData)
        .eq('id', vetProfile.id);

      if (profileError) {
        throw new Error(`Error updating vet profile: ${profileError.message}`);
      }

      // Verify the update was successful
      const verified = await verifyVetApprovalStatus(vetProfile.id, status);
      if (!verified) {
        console.warn(`Could not verify vet ${vetProfile.id} status update to ${status}. Will try to refresh data anyway.`);
      }

      console.log(`Successfully updated vet profile ${vetProfile.id} to status: ${status}`);

      // We'll skip updating the profiles table since it's causing a 400 Bad Request error
      // The approval status is already stored in the vet_profiles table, which is sufficient
      console.log(`Vet profile for user ${user.id} updated successfully to status: ${status}. Skipping profiles table update.`);

      // Send notification to the vet (this would normally be an email)
      // For now, we'll just log it
      console.log(`Notification to vet ${vetProfile.id}: Your account has been ${status}${feedback ? ` with feedback: ${feedback}` : ''}`);

      // Refresh the vet profile data to confirm changes
      await fetchUserDetails();

      toast({
        title: `Vet ${status === 'approved' ? 'Approved' : 'Rejected'}`,
        description: `The veterinarian has been ${status} successfully.`,
      });

      if (onUserUpdated) onUserUpdated();
      setShowRejectionForm(false);
      setRejectionFeedback('');
    } catch (error) {
      console.error('Error in vet approval process:', error);
      toast({
        title: 'Error',
        description: `Failed to ${status === 'approved' ? 'approve' : 'reject'} the vet. Please try again.`,
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [vetProfile, user, toast, onUserUpdated, fetchUserDetails]);

  const handleDeleteUser = useCallback(async () => {
    if (!user) return;
    
    try {
      setIsDeleting(true);
      
      // First, check if this is a vet and delete vet profile if it exists
      if (user.user_type === 'vet') {
        const { error: vetDeleteError } = await supabase
          .from('vet_profiles')
          .delete()
          .eq('id', user.id);
          
        if (vetDeleteError) {
          console.error('Error deleting vet profile:', vetDeleteError);
          throw new Error(vetDeleteError.message);
        }
      }
      
      // Delete user profile
      const { error: profileDeleteError } = await supabase
        .from('profiles')
        .delete()
        .eq('id', user.id);
        
      if (profileDeleteError) {
        console.error('Error deleting user profile:', profileDeleteError);
        throw new Error(profileDeleteError.message);
      }
      
      // Delete user from auth
      const { error: authDeleteError } = await supabase.auth.admin.deleteUser(user.id);
      
      if (authDeleteError) {
        console.error('Error deleting user from auth:', authDeleteError);
        throw new Error(authDeleteError.message);
      }
      
      toast({
        title: 'User Deleted',
        description: 'The user has been successfully deleted.',
      });
      
      if (onUserUpdated) onUserUpdated();
      onClose();
    } catch (error) {
      console.error('Error deleting user:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete user. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsDeleting(false);
      setShowDeleteConfirmation(false);
    }
  }, [user, toast, onUserUpdated, onClose]);

  const handleViewDocument = useCallback(async (url: string) => {
    if (!url) {
      toast({
        title: 'Error',
        description: 'No license document available',
        variant: 'destructive'
      });
      return;
    }

    try {
      // Use the imported utility function to open the file
      const success = await openFile(url);
      
      if (!success) {
        // Fallback to direct URL opening if the utility function fails
        window.open(url, '_blank');
        
        toast({
          title: 'Warning',
          description: 'Using direct URL access. If the document doesn\'t load, please try downloading it instead.',
          variant: 'default',
        });
      }
    } catch (error) {
      console.error('Error viewing document:', error);
      toast({
        title: 'Error',
        description: 'Failed to view the document. Please try downloading it instead.',
        variant: 'destructive',
      });
    }
  }, [toast]);

  const getStatusBadge = useCallback((status: string | null | undefined) => {
    const statusLower = status?.toLowerCase() || 'pending';
    const statusColors: Record<string, string> = {
      pending: 'bg-yellow-100 text-yellow-800',
      approved: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800',
      active: 'bg-blue-100 text-blue-800',
      suspended: 'bg-gray-100 text-gray-800',
    };
    
    return (
      <Badge className={statusColors[statusLower] || 'bg-gray-100 text-gray-800'}>
        {status || 'Unknown'}
      </Badge>
    );
  }, []);

  const downloadLicenseDocument = useCallback(async (url: string | undefined) => {
    if (!url) {
      toast({
        title: 'Error',
        description: 'No license document available',
        variant: 'destructive'
      });
      return;
    }

    try {
      const success = await downloadFile(url);
      
      if (success) {
        toast({
          title: 'Success',
          description: 'License document downloaded successfully',
        });
      } else {
        toast({
          title: 'Warning',
          description: 'Could not download the document automatically. Trying direct download...',
          variant: 'default',
        });
        
        // Fallback to direct URL download
        window.open(url, '_blank');
      }
    } catch (error) {
      console.error('Error downloading document:', error);
      toast({
        title: 'Error',
        description: 'Failed to download the document',
        variant: 'destructive',
      });
    }
  }, [toast]);

  if (!user) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <User className="h-5 w-5" />
            {user.full_name || 'Unknown User'}
          </DialogTitle>
          <DialogDescription>
            User ID: {user.id} • Joined: {new Date(user.created_at).toLocaleDateString()}
            {user.user_type === 'vet' && (
              <span className="ml-2 text-blue-600 font-medium">
                • Veterinarian Account
              </span>
            )}
          </DialogDescription>
        </DialogHeader>

        <Tabs defaultValue="profile" className="mt-4">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="profile">Profile</TabsTrigger>
            <TabsTrigger
              value="documents"
              className={user.user_type === 'vet' ? '' : 'hidden'}
            >
              Documents
            </TabsTrigger>
            <TabsTrigger
              value="pets"
              className={user.user_type === 'pet_owner' ? '' : 'hidden'}
            >
              Pets
            </TabsTrigger>
            <TabsTrigger value="appointments">Appointments</TabsTrigger>
          </TabsList>

          <TabsContent value="profile" className="space-y-4">
            <Card>
              <CardHeader className="flex justify-between items-start">
                <CardTitle>User Information</CardTitle>
                <Button 
                  variant="destructive" 
                  size="sm"
                  onClick={() => setShowDeleteConfirmation(true)}
                >
                  <Trash2 className="h-4 w-4 mr-1" />
                  Delete User
                </Button>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-500">Full Name</p>
                    <p className="font-medium">{user.full_name}</p>
                  </div>
                  <strong>User Type:</strong>
                  <Badge className="ml-2" variant={user.user_type === 'vet' ? 'default' : 'secondary'}>
                    {user.user_type.replace('_', ' ')}
                  </Badge>
                </div>
                <div>
                  <strong>Name:</strong> {user.full_name || 'Not provided'}
                </div>
                <div>
                  <strong>User Type:</strong>
                  <Badge className="ml-2" variant={user.user_type === 'vet' ? 'default' : 'secondary'}>
                    {user.user_type.replace('_', ' ')}
                  </Badge>
                </div>
                <div>
                  <strong>Status:</strong> {getStatusBadge(user.status || 'active')}
                </div>
              </CardContent>
            </Card>

            {user.user_type === 'vet' && vetProfile && (
              <Card>
                <CardHeader>
                  <CardTitle>Veterinarian Profile</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <strong>Name:</strong> Dr. {vetProfile.first_name} {vetProfile.last_name}
                  </div>
                  <div>
                    <strong>Specialization:</strong> {vetProfile.specialization || 'General Practice'}
                  </div>
                  <div>
                    <strong>Experience:</strong> {vetProfile.years_experience || 0} years
                  </div>
                  <div>
                    <strong>Consultation Fee:</strong> ${vetProfile.consultation_fee || 0}
                  </div>
                  <div>
                    <strong>Approval Status:</strong> {getStatusBadge(vetProfile.approval_status)}
                  </div>
                  <div>
                    <strong>Location:</strong> {vetProfile.clinic_location || 'Not specified'}
                  </div>
                  {vetProfile.about && (
                    <div>
                      <strong>About:</strong>
                      <p className="mt-1 text-sm text-muted-foreground">{vetProfile.about}</p>
                    </div>
                  )}

                  {vetProfile && vetProfile.approval_status === 'pending' && (
                    <div className="space-y-4 mt-4">
                      {!showRejectionForm ? (
                        <div className="flex space-x-2">
                          <Button
                            onClick={() => handleVetApproval('approved')}
                            className="bg-green-600 hover:bg-green-700"
                            disabled={loading}
                          >
                            <CheckCircleIcon className="mr-2 h-4 w-4" />
                            Approve Vet
                          </Button>
                          <Button
                            onClick={() => setShowRejectionForm(true)}
                            variant="destructive"
                            disabled={loading}
                          >
                            <XCircleIcon className="mr-2 h-4 w-4" />
                            Reject Vet
                          </Button>
                        </div>
                      ) : (
                        <div className="space-y-4 border rounded-md p-4 bg-red-50 border-red-200">
                          <div className="flex items-center text-red-700 mb-2">
                            <AlertCircle className="h-4 w-4 mr-2" />
                            <p className="font-medium">Provide rejection feedback</p>
                          </div>

                          <Textarea
                            placeholder="Please provide feedback on why this vet is being rejected..."
                            value={rejectionFeedback}
                            onChange={(e) => setRejectionFeedback(e.target.value)}
                            className="h-24"
                          />

                          <div className="flex space-x-2">
                            <Button
                              onClick={() => handleVetApproval('rejected', rejectionFeedback)}
                              variant="destructive"
                              disabled={loading || !rejectionFeedback.trim()}
                            >
                              <XCircleIcon className="mr-2 h-4 w-4" />
                              Confirm Rejection
                            </Button>
                            <Button
                              onClick={() => {
                                setShowRejectionForm(false);
                                setRejectionFeedback('');
                              }}
                              variant="outline"
                              disabled={loading}
                            >
                              Cancel
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
          </TabsContent>

          {user.user_type === 'vet' && (
            <TabsContent value="documents" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Veterinarian Documents
                  </CardTitle>
                  <CardDescription>
                    Review uploaded licenses and certifications for approval
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex items-center justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                      <span className="ml-2">Loading documents...</span>
                    </div>
                  ) : vetProfile ? (
                    <div className="space-y-6">
                      {/* License Document */}
                      {vetProfile.license_url ? (
                        <div className="border rounded-lg p-4 bg-blue-50">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className="p-2 bg-blue-100 rounded-lg">
                                <FileText className="w-5 h-5 text-blue-600" />
                              </div>
                              <div>
                                <h4 className="font-medium text-lg">Veterinary License</h4>
                                <p className="text-sm text-muted-foreground">
                                  Professional veterinary license document
                                </p>
                                <p className="text-xs text-green-600 mt-1">
                                  ✓ Document uploaded
                                </p>
                              </div>
                            </div>
                            <div className="flex gap-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => downloadLicenseDocument(vetProfile?.license_document_url || vetProfile?.license_url || '')}
                                className="bg-white"
                                disabled={!vetProfile?.license_document_url && !vetProfile?.license_url}
                          <div className="flex items-center gap-3">
                            <div className="p-2 bg-yellow-100 rounded-lg">
                              <FileWarning className="w-5 h-5 text-yellow-600" />
                            </div>
                            <div>
                              <h4 className="font-medium text-lg">No License Document</h4>
                              <p className="text-sm text-muted-foreground">
                                No license document has been uploaded by this veterinarian.
                              </p>
                            </div>
                          </div>
                        </div>
                        {vetProfile.approval_status === 'pending' && (
                          <div className="border rounded-lg p-4 bg-red-50 mt-4">
                            <div className="flex items-center gap-3">
                              <div className="p-2 bg-red-100 rounded-lg">
                                <XCircle className="w-5 h-5 text-red-600" />
                              </div>
                              <div>
                                <h4 className="font-medium text-lg text-red-800">No License Uploaded</h4>
                                <p className="text-sm text-red-600">
                                  Veterinary license document is required for approval
                                </p>
                              </div>
                            </div>
                          </div>
                        )}
                      )}

                      {/* Clinic Images */}
                      {vetProfile.clinic_images && vetProfile.clinic_images.length > 0 ? (
                        <div className="border rounded-lg p-4">
                          <h4 className="font-medium mb-3 flex items-center gap-2">
                            <Eye className="w-4 h-4" />
                            Clinic Images ({vetProfile.clinic_images.length})
                          </h4>
                          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                            {vetProfile.clinic_images.map((imageUrl: string, index: number) => (
                              <div key={index} className="relative group">
                                <img
                                  src={imageUrl}
                                  alt={`Clinic image ${index + 1}`}
                                  className="w-full h-32 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity border"
                                  onClick={() => openDocument(imageUrl)}
                                />
                                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all rounded-lg flex items-center justify-center">
                                  <Eye className="w-6 h-6 text-white opacity-0 group-hover:opacity-100 transition-opacity" />
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      ) : (
                        <div className="border rounded-lg p-4 bg-gray-50">
                          <div className="flex items-center gap-3">
                            <div className="p-2 bg-gray-100 rounded-lg">
                              <FileText className="w-5 h-5 text-gray-600" />
                            </div>
                            <div>
                              <h4 className="font-medium text-gray-800">No Clinic Images</h4>
                              <p className="text-sm text-gray-600">
                                No clinic images have been uploaded yet
                              </p>
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Approval Status and Actions */}
                      <div className="border rounded-lg p-4 bg-yellow-50">
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-medium text-lg">Approval Status</h4>
                            <div className="flex items-center space-x-2">
                              <div className="font-medium">Status:</div>
                              {getStatusBadge(vetProfile?.approval_status || 'pending')}
                            </div>
                          </div>
                          {vetProfile.approved_at && (
                            <p className="text-xs text-muted-foreground mt-1">
                              Approved on {new Date(vetProfile.approved_at).toLocaleDateString()}
                            </p>
                          )}
                          {vetProfile.approval_status === 'pending' && (
                            <div className="flex gap-2">
                              <Button
                                onClick={() => handleVetApproval('approved')}
                                className="bg-green-600 hover:bg-green-700"
                              >
                                <CheckCircle className="w-4 h-4 mr-1" />
                                Approve Vet
                              </Button>
                              <Button
                                variant="destructive"
                                onClick={() => handleVetApproval('rejected')}
                              >
                                <XCircle className="w-4 h-4 mr-1" />
                                Reject
                              </Button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-muted-foreground">No vet profile found for this user.</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}

          {user.user_type === 'pet_owner' && (
            <TabsContent value="pets" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Registered Pets</CardTitle>
                </CardHeader>
                <CardContent>
                  {/* Pet data would be fetched and displayed here */}
                  <p className="text-muted-foreground">Pet information would be displayed here.</p>
                </CardContent>
              </Card>
            </TabsContent>
          )}

          <TabsContent value="appointments" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Recent Appointments</CardTitle>
              </CardHeader>
              <CardContent>
                {appointments.length > 0 ? (
                  <div className="space-y-4">
                    {appointments.map((appointment) => (
                      <div key={appointment.id} className="border rounded-lg p-4">
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-medium">
                              {new Date(appointment.booking_date).toLocaleDateString()}
                            </h4>
                            <p className="text-sm text-muted-foreground">
                              {appointment.start_time} - {appointment.end_time}
                            </p>
                            <p className="text-sm">
                              {user.user_type === 'vet' 
                                ? `Pet: ${appointment.pets?.name || 'Unknown'}`
                                : `Vet: Dr. ${appointment.vet_profiles?.first_name} ${appointment.vet_profiles?.last_name}`
                              }
                            </p>
                            <p className="text-sm capitalize">{appointment.consultation_type}</p>
                          </div>
                          <Badge className={
                            appointment.status === 'confirmed' ? 'bg-blue-100 text-blue-800' :
                            appointment.status === 'completed' ? 'bg-green-100 text-green-800' :
                            appointment.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                            'bg-yellow-100 text-yellow-800'
                          }>
                            {appointment.status}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-muted-foreground">No appointments found.</p>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </DialogContent>
      
      {/* Delete User Confirmation Dialog */}
      <AlertDialog open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the user account
              and all associated data including pets, appointments, and medical records.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={(e) => {
                e.preventDefault();
                handleDeleteUser();
              }}
              disabled={isDeleting}
              className="bg-red-600 hover:bg-red-700"
            >
              {isDeleting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Deleting...
                </>
              ) : (
                'Delete User'
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </Dialog>
  );
};

export default UserDetailsModal;
